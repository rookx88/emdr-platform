generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  role               Role                 @default(CLIENT)
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  lastLoginAt        DateTime?
  
  // HIPAA compliance fields
  failedLoginAttempts Int                 @default(0)
  lastFailedLogin     DateTime?
  lockedAt            DateTime?
  lockedReason        String?
  twoFactorEnabled    Boolean             @default(false)
  twoFactorSecret     String?
  
  // Relations
  passwordHistory     PasswordHistory[]
  auditLogs           AuditLog[]
  tokenBlacklist      TokenBlacklist[]
  userActivity        UserActivity[]
  errorLogs           ErrorLog[]
  notes               Note[]
  sessions            Session[]           // Added sessions relation
  
  // Added missing relations
  therapistProfile    TherapistProfile?
  clientProfile       ClientProfile?
  
  @@index([email])
}

model PasswordHistory {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash  String
  createdAt     DateTime  @default(now())
  
  @@index([userId])
}

model AuditLog {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  action        String
  resourceType  String
  resourceId    String
  ipAddress     String
  userAgent     String
  details       String?
  timestamp     DateTime
  
  @@index([userId])
  @@index([timestamp])
  @@index([resourceType, resourceId])
}

model LoginAttempt {
  id            String    @id @default(uuid())
  email         String
  ipAddress     String
  successful    Boolean
  timestamp     DateTime  @default(now())
  
  @@index([email])
  @@index([ipAddress])
  @@index([timestamp])
}

model TokenBlacklist {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  reason      String?
  
  @@index([userId])
  @@index([expiresAt])
}

model UserActivity {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  ipAddress   String
  userAgent   String
  endpoint    String
  method      String
  timestamp   DateTime
  
  @@index([userId])
  @@index([timestamp])
}

model ErrorLog {
  id            String    @id @default(uuid())
  errorId       String    @unique
  message       String
  stack         String?
  statusCode    Int
  isOperational Boolean
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  ipAddress     String
  userAgent     String
  endpoint      String
  method        String
  requestBody   String?
  requestQuery  String?
  timestamp     DateTime
  
  @@index([errorId])
  @@index([timestamp])
  @@index([userId])
}

model Note {
  id          String    @id @default(uuid())
  content     String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isEncrypted Boolean   @default(true)
  sessionId   String?   // Optional relation to Session
  session     Session?  @relation(fields: [sessionId], references: [id])
  
  @@index([authorId])
  @@index([sessionId])
}

// Session model
model Session {
  id            String    @id @default(uuid())
  title         String?
  scheduledAt   DateTime
  duration      Int?
  endedAt       DateTime?
  recordingUrl  String?
  status        String    @default("SCHEDULED")  // SCHEDULED, CANCELED, STARTED, COMPLETED
  sessionType   String    @default("STANDARD")   // STANDARD, EMDR, ASSESSMENT, INTAKE
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  sessionNotes  Note[]
  
  @@index([creatorId])
  @@index([scheduledAt])
  @@index([status])
}

enum Role {
  ADMIN
  THERAPIST
  CLIENT
}

// Therapist profile with fix for missing relation
model TherapistProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties   String[]
  bio           String?
  licenseNumber String?
  licenseState  String?
  
  // Add the missing relation
  clients       ClientProfile[]

  @@index([licenseNumber])
}

// Client profile with fix for missing relation
model ClientProfile {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth       DateTime?
  emergencyContact  String?
  emergencyPhone    String?
  address           String?
  phoneNumber       String?
  therapistId       String?
  therapist         TherapistProfile? @relation(fields: [therapistId], references: [id])
  
  @@index([therapistId])
}