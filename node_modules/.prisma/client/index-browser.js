
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  lockedReason: 'lockedReason',
  lockedAt: 'lockedAt',
  lastFailedLogin: 'lastFailedLogin',
  failedLoginAttempts: 'failedLoginAttempts',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret'
};

exports.Prisma.ClientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dateOfBirth: 'dateOfBirth',
  phoneNumber: 'phoneNumber',
  address: 'address',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  insuranceInfo: 'insuranceInfo',
  consentFormSigned: 'consentFormSigned',
  therapistId: 'therapistId'
};

exports.Prisma.TherapistProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  licenseNumber: 'licenseNumber',
  licenseState: 'licenseState',
  specialties: 'specialties',
  bio: 'bio',
  availability: 'availability'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  scheduledAt: 'scheduledAt',
  endedAt: 'endedAt',
  duration: 'duration',
  notes: 'notes',
  recordingUrl: 'recordingUrl',
  status: 'status',
  sessionType: 'sessionType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionParticipantScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt'
};

exports.Prisma.EmdrSessionSettingsScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  bilateralType: 'bilateralType',
  speed: 'speed',
  direction: 'direction',
  customSettings: 'customSettings'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  clientId: 'clientId',
  isPrivate: 'isPrivate',
  isEncrypted: 'isEncrypted'
};

exports.Prisma.AssessmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  data: 'data',
  score: 'score',
  completedAt: 'completedAt',
  clientId: 'clientId',
  sessionId: 'sessionId',
  createdAt: 'createdAt'
};

exports.Prisma.TreatmentPlanScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  goals: 'goals',
  interventions: 'interventions',
  startDate: 'startDate',
  targetEndDate: 'targetEndDate',
  status: 'status',
  notes: 'notes',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contentType: 'contentType',
  size: 'size',
  url: 'url',
  uploadedAt: 'uploadedAt',
  uploaderId: 'uploaderId',
  isPublic: 'isPublic',
  isEncrypted: 'isEncrypted'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  receiverId: 'receiverId',
  sentAt: 'sentAt',
  readAt: 'readAt',
  isEncrypted: 'isEncrypted'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.LoginAttemptScalarFieldEnum = {
  id: 'id',
  email: 'email',
  ipAddress: 'ipAddress',
  successful: 'successful',
  timestamp: 'timestamp'
};

exports.Prisma.TokenBlacklistScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  reason: 'reason'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  endpoint: 'endpoint',
  method: 'method',
  timestamp: 'timestamp'
};

exports.Prisma.ErrorLogScalarFieldEnum = {
  id: 'id',
  errorId: 'errorId',
  message: 'message',
  stack: 'stack',
  statusCode: 'statusCode',
  isOperational: 'isOperational',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  endpoint: 'endpoint',
  method: 'method',
  requestBody: 'requestBody',
  requestQuery: 'requestQuery',
  timestamp: 'timestamp'
};

exports.Prisma.SecurityConfigurationScalarFieldEnum = {
  id: 'id',
  passwordMinLength: 'passwordMinLength',
  passwordRequireUpper: 'passwordRequireUpper',
  passwordRequireLower: 'passwordRequireLower',
  passwordRequireNumber: 'passwordRequireNumber',
  passwordRequireSpecial: 'passwordRequireSpecial',
  passwordHistoryCount: 'passwordHistoryCount',
  accountLockoutThreshold: 'accountLockoutThreshold',
  accountLockoutDuration: 'accountLockoutDuration',
  sessionTimeout: 'sessionTimeout',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.DataAccessLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accessedData: 'accessedData',
  purpose: 'purpose',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress'
};

exports.Prisma.BusinessAssociateAgreementScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactName: 'contactName',
  contactEmail: 'contactEmail',
  agreementText: 'agreementText',
  signedAt: 'signedAt',
  expiresAt: 'expiresAt',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  THERAPIST: 'THERAPIST',
  CLIENT: 'CLIENT'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  SCHEDULED: 'SCHEDULED',
  CANCELED: 'CANCELED',
  STARTED: 'STARTED',
  COMPLETED: 'COMPLETED'
};

exports.SessionType = exports.$Enums.SessionType = {
  STANDARD: 'STANDARD',
  EMDR: 'EMDR',
  ASSESSMENT: 'ASSESSMENT',
  INTAKE: 'INTAKE'
};

exports.SessionRole = exports.$Enums.SessionRole = {
  HOST: 'HOST',
  PARTICIPANT: 'PARTICIPANT',
  OBSERVER: 'OBSERVER'
};

exports.BilateralType = exports.$Enums.BilateralType = {
  VISUAL: 'VISUAL',
  AUDIO: 'AUDIO',
  HAPTIC: 'HAPTIC'
};

exports.Direction = exports.$Enums.Direction = {
  HORIZONTAL: 'HORIZONTAL',
  VERTICAL: 'VERTICAL',
  DIAGONAL: 'DIAGONAL'
};

exports.AssessmentType = exports.$Enums.AssessmentType = {
  SUDS: 'SUDS',
  VOC: 'VOC',
  INITIAL_ASSESSMENT: 'INITIAL_ASSESSMENT',
  PROGRESS_ASSESSMENT: 'PROGRESS_ASSESSMENT',
  DISCHARGE_ASSESSMENT: 'DISCHARGE_ASSESSMENT'
};

exports.TreatmentStatus = exports.$Enums.TreatmentStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DISCONTINUED: 'DISCONTINUED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  APPOINTMENT: 'APPOINTMENT',
  REMINDER: 'REMINDER',
  SYSTEM: 'SYSTEM',
  MESSAGE: 'MESSAGE'
};

exports.Prisma.ModelName = {
  User: 'User',
  ClientProfile: 'ClientProfile',
  TherapistProfile: 'TherapistProfile',
  Session: 'Session',
  SessionParticipant: 'SessionParticipant',
  EmdrSessionSettings: 'EmdrSessionSettings',
  Note: 'Note',
  Assessment: 'Assessment',
  TreatmentPlan: 'TreatmentPlan',
  Document: 'Document',
  Message: 'Message',
  Notification: 'Notification',
  PasswordHistory: 'PasswordHistory',
  AuditLog: 'AuditLog',
  LoginAttempt: 'LoginAttempt',
  TokenBlacklist: 'TokenBlacklist',
  UserActivity: 'UserActivity',
  ErrorLog: 'ErrorLog',
  SecurityConfiguration: 'SecurityConfiguration',
  DataAccessLog: 'DataAccessLog',
  BusinessAssociateAgreement: 'BusinessAssociateAgreement'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
