generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  firstName    String?
  lastName     String?
  role         Role      @default(CLIENT)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?

  // HIPAA compliance fields
  failedLoginAttempts Int       @default(0)
  lastFailedLogin     DateTime?
  lockedAt            DateTime?
  lockedReason        String?
  twoFactorEnabled    Boolean   @default(false)
  twoFactorSecret     String?

  // Relations
  passwordHistory PasswordHistory[]
  auditLogs       AuditLog[]
  tokenBlacklist  TokenBlacklist[]
  userActivity    UserActivity[]
  errorLogs       ErrorLog[]
  notes           Note[]

  @@index([email])
}

model PasswordHistory {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash String
  createdAt    DateTime @default(now())

  @@index([userId])
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  action       String
  resourceType String
  resourceId   String
  ipAddress    String
  userAgent    String
  details      String?
  timestamp    DateTime

  @@index([userId])
  @@index([timestamp])
  @@index([resourceType, resourceId])
}

model LoginAttempt {
  id         String   @id @default(uuid())
  email      String
  ipAddress  String
  successful Boolean
  timestamp  DateTime @default(now())

  @@index([email])
  @@index([ipAddress])
  @@index([timestamp])
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  reason    String?

  @@index([userId])
  @@index([expiresAt])
}

model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String
  userAgent String
  endpoint  String
  method    String
  timestamp DateTime

  @@index([userId])
  @@index([timestamp])
}

model ErrorLog {
  id            String   @id @default(uuid())
  errorId       String   @unique
  message       String
  stack         String?
  statusCode    Int
  isOperational Boolean
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  ipAddress     String
  userAgent     String
  endpoint      String
  method        String
  requestBody   String?
  requestQuery  String?
  timestamp     DateTime

  @@index([errorId])
  @@index([timestamp])
  @@index([userId])
}

model Note {
  id          String   @id @default(uuid())
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isEncrypted Boolean  @default(true)

  @@index([authorId])
}

enum Role {
  ADMIN
  THERAPIST
  CLIENT
}
