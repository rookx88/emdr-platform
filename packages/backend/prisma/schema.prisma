// packages/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  THERAPIST
  CLIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELED
  COMPLETED
  NO_SHOW
}

enum AppointmentType {
  INTAKE
  STANDARD
  EMDR
  FOLLOWUP
  EMERGENCY
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  passwordHash        String
  firstName           String?
  lastName            String?
  role                Role                  @default(CLIENT)
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastLoginAt         DateTime?
  
  // HIPAA compliance fields
  failedLoginAttempts Int                   @default(0)
  lastFailedLogin     DateTime?
  lockedAt            DateTime?
  lockedReason        String?
  twoFactorEnabled    Boolean               @default(false)
  twoFactorSecret     String?
  invitationTokens  InvitationToken[]
  
  // Relations
  passwordHistory     PasswordHistory[]
  auditLogs           AuditLog[]
  tokenBlacklist      TokenBlacklist[]
  userActivity        UserActivity[]
  errorLogs           ErrorLog[]
  notes               Note[]
  sessions            Session[]
  therapistProfile    TherapistProfile?
  clientProfile       ClientProfile?
  
  // PHI Protection Relations
  protectedHealthInfo ProtectedHealthInfo[]
  securityScans       SecurityScan[]
  phiAccessAttempts   PHIAccessAttempt[]
  
  @@index([email])
}

model PasswordHistory {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash  String
  createdAt     DateTime  @default(now())
  
  @@index([userId])
}

model AuditLog {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  action        String
  resourceType  String
  resourceId    String
  ipAddress     String
  userAgent     String
  details       String?
  timestamp     DateTime
  
  @@index([userId])
  @@index([timestamp])
  @@index([resourceType, resourceId])
}

model LoginAttempt {
  id            String    @id @default(uuid())
  email         String
  ipAddress     String
  successful    Boolean
  timestamp     DateTime  @default(now())
  
  @@index([email])
  @@index([ipAddress])
  @@index([timestamp])
}

model TokenBlacklist {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  reason      String?
  
  @@index([userId])
  @@index([expiresAt])
}

model UserActivity {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  ipAddress   String
  userAgent   String
  endpoint    String
  method      String
  timestamp   DateTime
  
  @@index([userId])
  @@index([timestamp])
}

model ErrorLog {
  id            String    @id @default(uuid())
  errorId       String    @unique
  message       String
  stack         String?
  statusCode    Int
  isOperational Boolean
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  ipAddress     String
  userAgent     String
  endpoint      String
  method        String
  requestBody   String?
  requestQuery  String?
  timestamp     DateTime
  
  @@index([errorId])
  @@index([timestamp])
  @@index([userId])
}

model Note {
  id          String    @id @default(uuid())
  content     String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isEncrypted Boolean   @default(true)
  sessionId   String?
  session     Session?  @relation(fields: [sessionId], references: [id])
  
  @@index([authorId])
  @@index([sessionId])
}

// Session model
model Session {
  id            String    @id @default(uuid())
  title         String?
  scheduledAt   DateTime
  duration      Int?
  endedAt       DateTime?
  recordingUrl  String?
  status        String    @default("SCHEDULED")
  sessionType   String    @default("STANDARD")
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  sessionNotes  Note[]
  
  @@index([creatorId])
  @@index([scheduledAt])
  @@index([status])
}

// TherapistProfile model
model TherapistProfile {
  id                String             @id @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Professional information
  specialties       String[]
  bio               String?
  licenseNumber     String?
  licenseState      String?
  
  // Calendar settings
  workingHours      Json?
  breakTime         Int                @default(10)
  maxDailyClients   Int                @default(8)
  calendarEmail     String?
  calendarId        String?
  
  // Scheduling policies
  newClientBuffer   Int                @default(30)
  cancelationPolicy String?
  
  // Relations
  clients           ClientProfile[]
  appointments      Appointment[]
  availability      AvailabilityWindow[]
  
  @@index([licenseNumber])
}

// ClientProfile model
model ClientProfile {
  id                String             @id @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic information
  dateOfBirth       DateTime?
  phoneNumber       String?
  email             String?
  address           String?
  
  // Emergency Contact
  emergencyContact  String?
  emergencyPhone    String?
  
  // Appointment preferences
  preferredDays     String[]
  preferredTimes    String[]
  appointmentDuration Int              @default(50)
  reminderPreference String?
  sessionFrequency  String?
  
  // Therapist relationship
  therapistId       String?
  therapist         TherapistProfile?  @relation(fields: [therapistId], references: [id])
  
  // Related appointments
  appointments      Appointment[]
  
  @@index([therapistId])
}

// Appointment model
model Appointment {
  id                String             @id @default(uuid())
  
  // Appointment details
  title             String
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus  @default(SCHEDULED)
  type              AppointmentType    @default(STANDARD)
  notes             String?
  location          String?
  
  // Relations
  clientId          String
  client            ClientProfile      @relation(fields: [clientId], references: [id])
  therapistId       String
  therapist         TherapistProfile   @relation(fields: [therapistId], references: [id])
  
  // Virtual session information
  isVirtual         Boolean            @default(true)
  videoSessionId    String?
  videoSessionUrl   String?
  
  // External calendar integration
  externalCalendarEventId String?
  
  // Reminders and history
  reminderSentAt    DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  canceledAt        DateTime?
  cancelReason      String?
  
  @@index([clientId])
  @@index([therapistId])
  @@index([startTime])
  @@index([status])
}

// TherapistAvailability model for recurring availability
model AvailabilityWindow {
  id                String             @id @default(uuid())
  therapistId       String
  therapist         TherapistProfile   @relation(fields: [therapistId], references: [id])
  
  dayOfWeek         Int
  startTime         String
  endTime           String
  isRecurring       Boolean            @default(true)
  specificDate      DateTime?
  
  // Exceptions (e.g., holiday closures)
  isException       Boolean            @default(false)
  exceptionReason   String?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@index([therapistId])
  @@index([dayOfWeek])
  @@index([specificDate])
}

// PHI Protection Models
model ProtectedHealthInfo {
  id            String    @id @default(uuid())
  token         String    @unique
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phiType       String
  encryptedData String
  createdAt     DateTime  @default(now())
  lastAccessed  DateTime

  @@index([userId])
  @@index([phiType])
}

model SecurityScan {
  id          String    @id @default(uuid())
  scanType    String
  startedBy   String
  user        User      @relation(fields: [startedBy], references: [id])
  startedAt   DateTime
  completedAt DateTime?
  status      String
  findings    Json?

  @@index([startedBy])
  @@index([startedAt])
  @@index([status])
}

model PHIAccessAttempt {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phiToken      String
  timestamp     DateTime @default(now())
  wasAuthorized Boolean
  ipAddress     String
  userAgent     String
  purpose       String?

  @@index([userId])
  @@index([phiToken])
  @@index([timestamp])
  @@index([wasAuthorized])
}

model InvitationToken {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  usedAt      DateTime?
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model EmailLog {
  id            String    @id @default(uuid())
  to            String
  subject       String
  templateUsed  String
  status        String    // SENT, FAILED
  messageId     String?
  error         String?
  sentAt        DateTime
  sentBy        String
  
  @@index([to])
  @@index([sentAt])
  @@index([status])
}