generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced schema.prisma
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  role          Role        @default(CLIENT)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLoginAt   DateTime?
  
  // Relationships
  therapistProfile  TherapistProfile?
  clientProfile     ClientProfile?
  sessions          Session[]          @relation("SessionParticipant")
  createdSessions   Session[]          @relation("SessionCreator")
  notes             Note[]             @relation("NoteAuthor")
  clientNotes       Note[]             @relation("NoteSubject")
  
  @@index([email])
}

model TherapistProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  professionalId  String?   @unique // License number
  specialties     String[]
  bio             String?   @db.Text
  availableHours  Json?     // Structured JSON for availability schedule
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  clients         ClientTherapist[]
}

model ClientProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth     DateTime?
  emergencyContact String?
  preferredContactMethod String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  therapists      ClientTherapist[]
}

model ClientTherapist {
  id            String    @id @default(uuid())
  clientId      String
  therapistId   String
  startDate     DateTime  @default(now())
  endDate       DateTime?
  status        String    @default("ACTIVE") // ACTIVE, PAUSED, TERMINATED
  
  // Relationships
  client        ClientProfile     @relation(fields: [clientId], references: [id])
  therapist     TherapistProfile  @relation(fields: [therapistId], references: [id])
  
  @@unique([clientId, therapistId])
}

model Session {
  id            String    @id @default(uuid())
  title         String
  scheduledStart DateTime
  scheduledEnd  DateTime
  actualStart   DateTime?
  actualEnd     DateTime?
  status        String    @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  sessionType   String    @default("EMDR") // EMDR, CONSULTATION, INTAKE
  creatorId     String
  notes         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  creator       User      @relation("SessionCreator", fields: [creatorId], references: [id])
  participants  User[]    @relation("SessionParticipant")
  emdrSettings  EmdrSessionSettings?
  recordings    Recording[]
}

model EmdrSessionSettings {
  id            String    @id @default(uuid())
  sessionId     String    @unique
  session       Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  visualType    String    @default("HORIZONTAL") // HORIZONTAL, VERTICAL, OTHER
  speed         Int       @default(30) // Movements per minute
  movementWidth Int       @default(700) // Pixels
  soundEnabled  Boolean   @default(false)
  hapticEnabled Boolean   @default(false)
  customSettings Json?    // For additional configurable parameters
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Recording {
  id            String    @id @default(uuid())
  sessionId     String
  session       Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  storageUrl    String    // S3 or other storage URL (encrypted)
  contentType   String    // video/webm, audio/mp3, etc.
  durationSec   Int
  createdAt     DateTime  @default(now())
  
  @@index([sessionId])
}

model Note {
  id            String    @id @default(uuid())
  authorId      String
  author        User      @relation("NoteAuthor", fields: [authorId], references: [id])
  subjectId     String?
  subject       User?     @relation("NoteSubject", fields: [subjectId], references: [id])
  content       String    @db.Text
  noteType      String    // SESSION_NOTE, PROGRESS_NOTE, TREATMENT_PLAN
  isEncrypted   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([authorId])
  @@index([subjectId])
}

enum Role {
  ADMIN
  THERAPIST
  CLIENT
}